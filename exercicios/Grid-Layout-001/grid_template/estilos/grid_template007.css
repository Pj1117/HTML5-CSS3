@charset "UTF-8";

* {
    font-family: Arial, Helvetica, sans-serif;
    font-size: 20px;
    font-weight: bold;
    text-align: center;
}

.wrapper{
    display: grid;
    grid-template-columns: repeat(2, 100px); /*auto-fill - vai preencher a tela com colunas  de acordo com um tamanho um especificado ex:repeat(auto-fill, 100px); irá preencher com colunas com LARGURA de 100px cada, e caso aumente o tamanho da viewport, mais e mais colunas aparecem. */

    /* auto-fit ele vai respeitando o grid-template-area, colocar 100px para cada uma da definiçoes ex: se retirarmos uma coluna das 5 que existiam do grid-template-reas,o auto-fit vai ajustar para 4 colunas com as medidas especificadas antes. caso se colocarsse 2 colubas no grid-template-columns e 5 colunas no grid-template-areas, 2 delas estaria normais, e as 'vazadas' nao cumpririam as 'regras' da 2 primeiras, isso não ocorrem no auto-fit.*/
    grid-auto-rows: 200px; 
    grid-gap: 0.5rem;
    padding: 20px;

    grid-template-areas:
        "header header header header"
        "aside   main   main  main" 
        "footer footer footer footer"
    ;
    /* com grid template areas é possivel definir quantas COLUNAS esse elemento vai ocupar chamando o nome que se deu a esse elemento no grid-area (clramente respeitando o numero de colunas especificados na div principal [.wrapper].) */
    
}

header{
    grid-area: header; /* Um nome para facilmente identificar esse elementro dentre outros dentro do layout. */
}

main{
    grid-area: main;
}

aside{
    grid-area: aside;
}

footer{
    grid-area: footer;
}


.wrapper *{
    border: 3px solid black;
}

.wrapper  > *{
    background-color: pink;
}

.wrapper > *:nth-child(even){
    background-color: lavender;
}